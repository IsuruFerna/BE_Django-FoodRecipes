name: Testing
on: push

jobs:
   test_project:
      runs-on: ubuntu-latest
      env:
         SECRET_KEY: ${{ secrets.SECRET_KEY }}
         POSTGRES_DB: ${{ secrets.POSTGRES_NAME }}
         POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
         POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
         POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
         POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

      steps:
         - uses: actions/checkout@v2

         - name: Install dependencies
           run: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt

         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v2

         - name: Install docker compose
           run: |
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose

         - name: Set up Python
           uses: actions/setup-python@v2
           with:
              python-version: "3.12"

         - name: build and run docker compose
           run: |
              docker-compose up -d --buid

         - name: Check Docker Compose logs db
           run: docker-compose logs my_postgres

         - name: Check Docker Compose logs web
           run: docker-compose logs web

         # - name: Wait for Postgres to be ready
         #   run: |
         #      timeout 2m bash -c 'until docker-compose exec -T my_postgres pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; do sleep 1; done'

         # - name: Check container status
         #   run: |
         #      docker-compose ps
         #      docker-compose exec -T my_postgres pg_isready -U $POSTGRES_USER -d $POSTGRES_DB || echo "Postgres is not ready"

         - name: Run Django unit tests
           run: |
              python3 manage.py test
